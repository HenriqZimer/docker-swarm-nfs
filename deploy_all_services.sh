#!/bin/bash

# üöÄ Script para deploy de todos os servi√ßos com Docker Secrets
# Autor: Docker Swarm Setup
# Data: $(date)

set -e  # Parar em caso de erro

echo "üöÄ ========================================"
echo "   DEPLOYANDO TODOS OS SERVI√áOS"
echo "   COM DOCKER SECRETS"
echo "========================================="
echo ""

# Verificar se est√° no Swarm
if ! docker info --format '{{.Swarm.LocalNodeState}}' | grep -q active; then
    echo "‚ùå ERRO: Docker Swarm n√£o est√° ativo!"
    exit 1
fi

# Verificar se secrets existem (n√£o mais necess√°rio com secrets locais)
echo "üîç Verificando diret√≥rios dos servi√ßos..."

services=(
    "grafana"
    "zabbix" 
    "n8n"
    "vaultwarden"
    "portainer"
    "cloudflared"
    "harbor"
    "jenkins"
    "argocd"
)

missing_services=()
for service in "${services[@]}"; do
    if [ ! -d "$service" ] || [ ! -f "$service/docker-compose.yml" ]; then
        missing_services+=("$service")
    fi
done

if [ ${#missing_services[@]} -gt 0 ]; then
    echo "‚ùå ERRO: Servi√ßos faltando:"
    for service in "${missing_services[@]}"; do
        echo "   - $service (diret√≥rio ou docker-compose.yml n√£o encontrado)"
    done
    echo ""
    exit 1
fi

echo "‚úÖ Todos os servi√ßos est√£o dispon√≠veis"
echo ""

# Fun√ß√£o para deploy com verifica√ß√£o
deploy_service() {
    local service_name=$1
    local description=$2
    
    echo "üì¶ Deployando $description..."
    
    # Definir diret√≥rio base do script
    local script_dir="$(cd "$(dirname "$0")" && pwd)"
    local service_dir="$script_dir/$service_name"
    
    cd "$service_dir"
    
    if [ ! -f "docker-compose.yml" ]; then
        echo "‚ùå ERRO: docker-compose.yml n√£o encontrado em $service_name"
        return 1
    fi
    
    docker stack deploy -c docker-compose.yml "$service_name"
    
    # Aguardar um pouco para o servi√ßo iniciar
    sleep 3
    
    # Verificar se o servi√ßo foi criado
    if docker service ls --filter "name=${service_name}_" --format "{{.Name}}" | grep -q "${service_name}_"; then
        echo "‚úÖ $description deployado com sucesso"
    else
        echo "‚ö†Ô∏è  $description pode ter problemas - verifique os logs"
    fi
    
    # Voltar para o diret√≥rio base
    cd "$script_dir"
    
    echo ""
}

echo "üöÄ Iniciando deploy de todos os servi√ßos..."
echo ""

# Deploy na ordem correta (depend√™ncias primeiro)
deploy_service "grafana" "Grafana (Monitoring)"
deploy_service "zabbix" "Zabbix (Monitoring)"
deploy_service "n8n" "N8N (Automation)"
deploy_service "vaultwarden" "Vaultwarden (Password Manager)"
deploy_service "portainer" "Portainer (Container Manager)"
deploy_service "cloudflared" "Cloudflared (Tunnel)"

echo "üéâ ========================================"
echo "   DEPLOY CONCLU√çDO!"
echo "========================================="
echo ""

echo ""
echo "üîç Verificando logs para poss√≠veis erros:"
echo "Use os comandos abaixo para verificar logs espec√≠ficos:"
echo ""
echo "docker service logs grafana_app"
echo "docker service logs grafana_db"
echo "docker service logs zabbix_app"
echo "docker service logs zabbix_server"
echo "docker service logs zabbix_db"
echo "docker service logs n8n_app"
echo "docker service logs vaultwarden_app"
echo "docker service logs portainer_app"
echo "docker service logs cloudflared_tunnel"
echo ""

echo "üìä Status dos servi√ßos:"
docker service ls

echo "‚úÖ Deploy completo! Verifique os servi√ßos nos dom√≠nios configurados."
